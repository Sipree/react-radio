{
  "name": "react-radio",
  "version": "1.0.4",
  "description": "React RadioGroup",
  "main": "lib/index.js",
  "scripts": {
    "test": "make",
    "lib": "gulp",
    "build-style": "webpack --progress --colors --config build-style.config.js",
    "dist": "webpack --progress --colors --config dist.config.js",
    "dist.min": "webpack --progress --colors --optimize-minimize --optimize-occurence-order --optimize-dedupe --config dist.min.config.js",
    "build": "npm run lib && npm run dist && npm run dist.min && npm run build-style",
    "serve": "http-server -p 9091",
    "dev": "webpack-dev-server --progress --colors --port 9090 --content-base http://localhost:9091"
  },
  "devDependencies": {
    "css-loader": "^0.9.0",
    "extract-text-webpack-plugin": "^0.3.5",
    "gulp": "^3.8.11",
    "gulp-react": "^3.0.1",
    "http-server": "^0.7.3",
    "jsx-loader": "^0.12.2",
    "style-loader": "^0.8.2",
    "stylus-loader": "^0.4.0",
    "webpack": "^1.4.13",
    "webpack-dev-server": "^1.6.6"
  },
  "dependencies": {
    "object-assign": "^2.0.0"
  },
  "peerDependencies": {
    "react": ">=0.13.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/zippyui/react-radio.git"
  },
  "keywords": [
    "radio",
    "input",
    "radio-group",
    "react",
    "react-component"
  ],
  "author": {
    "name": "ZippyUI",
    "email": "contact@zippyui.com"
  },
  "contributors": [],
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/zippyui/react-radio/issues"
  },
  "homepage": "https://github.com/zippyui/react-radio",
  "readme": "# react-radio\n\n> A carefully crafted radio-group for React\n\n## Install\n\n```sh\n$ npm install react-radio\n```\n\n## Usage\n\n```jsx\nvar RadioGroup = require('react-radio')\n\nvar colors = [\n    {\n        value: 'red',\n        label: 'Red color',\n        style: {\n            color: 'red'\n        }\n    },\n    'blue',\n    'orange'\n]\n\nfunction onChange(value, event){\n    console.log('checked ', value)\n}\n\n//uncontrolled\n<RadioGroup\n    name=\"colors\"\n    defaultValue={'red'}\n    items={colors}\n    onChange={onChange}\n/>\n\n//controlled\n<RadioGroup name=\"colors\" value={'red'} items={colors} onChange={onChange} />\n\n<RadioGroup name=\"colors\" value={'red'} onChange={onChange}>\n    <input type=\"radio\" value=\"blue\" />blue\n    <input type=\"radio\" value=\"red\" />red\n</RadioGroup>\n```\n\n## Props\n\n * name: String - the name to be set to all radios in the group\n * value/defaultValue - the value that should be checked in the group (controlled/uncontrolled)\n * labelStyle - a style for the radio label\n * inputStyle - a style for the radio input\n\n * checkedLabelStyle - a style for the checked radio label\n * checkedInputStyle - a style for the checked radio input\n\n * onChange: Function(value, event) - the function to be calle when the radio group value changes. NOTE: first param sent to this function is the new value, not the event object, as usual\n\n * renderRadio: Function(props, index, arr) - you can customize how each radio item is rendered in the group using this function. NOTE: it is called with 3 params, so not intended to be directly used with a React factory.\n\n Example:\n ```jsx\n    //NOT LIKE THIS\n    <RadioGroup renderRadio={React.DOM.label} />\n\n    //BUT like this\n    function renderRadio(props, index, arr){\n        return <label {...props} />\n    }\n\n    <RadioGroup renderRadio={renderRadio} />\n\n    //or\n    function renderRadio(props, index, arr){\n        if (index < arr.length - 1){\n            props.style.borderBottom = '1px solid blue'\n        }\n        props.style.display = 'block'\n        //we can skip returning something\n        //if we only want to modify props/styles\n    }\n ```\n\n If the `renderRadio` function returns undefined, we assume you just wanted to modify the props before rendering, which is ok, so we fallback to the default implementation:\n `<label {...props}/>`\n\n * items: Array\n\n    The items prop can be an array of strings/objects or mixed. If an array of strings, the strings will be used as both value and label. If objects, `item.value` will be used as a value, and `item.label` as a string:\n\n    Example:\n    ```js\n        var items = [\n            {label: 'Green', value: 'green'},\n            {label: 'Blueish', value: 'blue'},\n            {value: 'red'} //'red' will be used as both value and label\n        ]\n\n        //or\n        var items = ['green', 'blue', 'red']\n    ```\n\n    If an array item is an object, besides `value` and `label`, it can also have a `style` property and a `checkedStyle` property.\n\n    ```js\n    var items = [\n        'red',\n        {\n            label: 'Blue',\n            value: 'blue',\n            style: { color: 'blue'},\n            checkedStyle: { color: 'blue', background: 'red'}\n        }\n    ]\n    ```\n\n * children - if the component specifies children, the radio group children will not be generated from `items`, but will be what you specify in the `children` prop\n\nIf you have a ref to the `react-radio` component, you can also call `group.getValue()` to get the current value of the radio group.\n\n## Changelog\n\nSee [changelog](./CHANGELOG.md)\n\n## Contributing\n\nUse [Github issues](https://github.com/zippyui/react-radio/issues) for feature requests and bug reports.\n\nWe actively welcome pull requests.\n\nFor setting up the project locally, use:\n\n```sh\n$ git clone https://github.com/zippyui/react-radio\n$ cd react-radio\n$ npm install\n$ npm serve # to start http server\n$ npm dev   * to start webpack-dev-server\n```\n\nNow navigate to [localhost:9091](http://localhost:9091/)\n\nBefore building a new version, make sure you run\n\n```sh\n$ npm run build\n```\nwhich compiles the `src` folder (which contains jsx files) into the `lib` folder (only valid EcmaScript 5 files).\n\n## License\n\n#### MIT",
  "readmeFilename": "README.md",
  "gitHead": "6685ccaa290c3e944c47fdf8ec6be38f6d5f0dc5",
  "_id": "react-radio@1.0.4",
  "_shasum": "025d46e7511df61a7e785edd355bc1baf7e162fb",
  "_from": "react-radio@latest"
}
